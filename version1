import numpy
from numpy import array
#This function simply takes A matrix A and a vector x and returns y = Ax
def A_times_x(A,x):
    N = len(x)
    if N == 1:
        return [A[0]*x[0]]
    elif len(x) != len(A):
        print('ERROR IN A TIMES X: LENGTHS DO NOT MATCH')
        return 
    else:
        y = zero_matrix_of_size_i_j(N,1)
        for i in range(N):
            
            for j in range(N):
                y[i] = y[i] + A[i][j]*x[j]
        return y

#This function replaced the [0]*N notation that was previously used
#this is in order to avoid the problems with pointers leading to the wronful replacement of matrix elements
def zero_matrix_of_size_i_j(i,j):
    if i == 1:
        if j == 1:
            Matrix = [float(0)]
        else:
            Matrix = []
            #print('no')
            temp_matrix = []
            for b in range(j):
                temp_matrix.append(float(0))
            Matrix.append(temp_matrix)
    elif j == 1:
        Matrix = []
        #print('whygodwhy')
        for a in range(i):
            Matrix.append(float(0))
    else:
        Matrix = []
        #print('AHAHAHAHHA')
        for a in range(i):
            #print('p')
            temp_matrix = []
            for b in range(j):
                temp_matrix.append(float(0))
            Matrix.append(temp_matrix)
    return Matrix
    
#This function returns the scattering matrix of a given node
def get_scattering_matrix(Connectivity_matrix,node,SorP):
    N = sum(Connectivity_matrix[node])
    A = zero_matrix_of_size_i_j(N,N)
    if SorP == True:
        if N == 1:
            A = [float(-1)]
            
        else:
            
            for i in range(N):
                for j in range(N):
                    if i == j:
                        A[i][j] = (N-2)/N
                    else:
                        A[i][j] = (-2)/N
        return A
    else:
        if N == 1:
            A = [float(1)]
            
        else:
            
            for i in range(N):
                for j in range(N):
                    if i == j:
                        A[i][j] = (2-N)/N
                    else:
                        A[i][j] = 2/N
        return A

#This function simply returns a list of the nodes that an input is connected to
#i.e. the nodes that it will excite to
def get_connections(Connectivity_matrix,No_nodes,node):
    #no_connections = sum(Connectivity_matrix[node])
    connected_nodes = [];
    for i in range(No_nodes):
        if Connectivity_matrix[node][i] == 1:
            connected_nodes.append(i)
            
    return connected_nodes
    
#This function initalized the input_vector variable. This variable keeps track of the diffrent pulses
#At the input section of the simulation
#A section of an input vector is defined as such
#input_vector[node it will input to][node it is from][input it is from] = pulse magnitude
#i.e. An input of magnitude 0.5 into node 5, from node 6 (which is node 5's 2nd input), which originated from input 1 would have the form
#input_vector[4][1][0] = 0.5 note the -1's are due to starting at 0
#if this was the only input then all other elements are 0
def setup_inputs(Connectivity_matrix,No_nodes,inputs,Nodal_connection_container):
    input_vector = zero_matrix_of_size_i_j(No_nodes,1)
    No_inputs = len(inputs)
    
    for i in range(No_nodes):
        N = sum(Connectivity_matrix[i])
        input_vector[i] = zero_matrix_of_size_i_j(N,1)
    
        for j in range(N):
            input_vector[i][j] = zero_matrix_of_size_i_j(No_inputs,1)
    
    input_no = 0
    for i in inputs:
        Connected_nodes = Nodal_connection_container[i-1]
        for j in Connected_nodes:
            rev_connected_nodes = Nodal_connection_container[j]
            input_connection_number = rev_connected_nodes.index(i-1)
            input_vector[j][input_connection_number][input_no] = float(1)
        input_no+=1
        
    return input_vector

#This function initalizes the output vector in a 0 state
#this is simalar to the input vector (it is the scattered equivelent) except it does not take any initial values
#it will have the same indexing i.e. the 1st term represents the node that is emiting, the 2nd is where to and the 3rd is what pulse it is emiting
#it will thus have the same dimensions as the input vector
def Setup_output_vector(Connectivity_matrix,No_nodes,inputs):
    output_vector = zero_matrix_of_size_i_j(No_nodes,1)
    No_inputs = len(inputs)
    
    for i in range(No_nodes):
        N = sum(Connectivity_matrix[i])
        output_vector[i] = zero_matrix_of_size_i_j(N,1)
        for j in range(N):
            output_vector[i][j] = zero_matrix_of_size_i_j(No_inputs,1)
            
    return output_vector

#This function connects the input_vector to the output_vector, essentially signaling the shift from the input phase to the output phase
#it does this my taking the scattering matrix for each of the nodes and calculating the outputs based upon how the inputs interact with it
def Connect_input_phase_to_output_phase(No_nodes,input_vector,No_inputs,output_vector,Scattering_matrix_container,Nodal_connection_container):
    
    for i in range(No_nodes):
        
        Connections = Nodal_connection_container[i]
        no_connections = len(Connections)
        #y_vector = [0]
        
        for j in range(No_inputs):
                
            x_vector = zero_matrix_of_size_i_j(no_connections,1)
                
            for k in range(no_connections):
                    
                x_vector[k] = input_vector[i][k][j]
                
                #y = Ax
            y = A_times_x(Scattering_matrix_container[i],x_vector)
                
            for k in range(no_connections):
                    
                output_vector[i][k][j] = y[k]
                    
    return output_vector

#This resets all elements in the input_vector to 0 for the sake of tranfering from the output phase
#to the input phase without any reminents from the previous input phase
def reset_input_vector(input_vector):
    a=0
    for i in input_vector:
        b=0
        for j in input_vector[a]:
            c = 0
            for k in input_vector[a][b]:
                input_vector[a][b][c] = 0
                c += 1
            b += 1
        a += 1
                
    return input_vector
 
#This function connects the output phase to the input phase by using the Nodal_connection_container
#to evaluate how the results of the output phase should link to the input phase                   
def Connect_output_phase_to_input_phase(No_nodes,output_vector,No_inputs,input_vector,Nodal_connection_container):
    
    for i in range(No_nodes):
        
        Connections = Nodal_connection_container[i]
        no_connections = len(Connections)
        
        for k in range(No_inputs):
        
            for j in range(no_connections):
            
                Connected_node = Connections[j]
                pos = Nodal_connection_container[Connected_node].index(i)
                input_vector[Connected_node][pos][k] = output_vector[i][j][k]
                
    return input_vector

#This function sum's up the contributions from all the inputs into a node so that an observation can be made
def total_at_point(input_vector,node,input_pulse):
    
    inputs_being_observed = input_vector[node]
    total = 0.0
    x = len(inputs_being_observed)
    for i in range(x):
        total += inputs_being_observed[i][input_pulse]
    
    return total
    


#This function prints out the equation of the pulse at the observation points
def evaluate_observation_points(observation_points,input_vector,No_inputs,No_obs):
    
    #no_obs = len(observation_points)
    observed_values = zero_matrix_of_size_i_j(No_inputs,No_obs)
    a = 0
    for i in observation_points:
        equation_string = ''
        for j in range(No_inputs):
            total_from_pulse_j = total_at_point(input_vector,i-1,j)
            added_string = '%f*x%i' % (total_from_pulse_j,j)
            if j > 0:
                equation_string = equation_string + '+'
            equation_string = equation_string + ' ' + added_string 
            
        to_disp = 'Point %i observes:' % (i)
        to_disp = to_disp + ' ' + equation_string
        print(to_disp)
        observed_values[a][j] = equation_string
        a += 1
        
    return observed_values
        
    
    
#This is the main code for observing the network. It runs a wave simulation of the network
#for a set number of time steps and outputs the value at the observation points is recorded
#The observations are recorded as follows
#observation_recordings[time step][node being observed][input pulse]
#so if the observation points was [1,2,3] then to find the value at step 4 for node 2 input pulse 1 you would type
#observation_recordings[3][1][0]
def run_network(Connectivity_matrix,time_steps,inputs,observation_points,SorP):

    No_nodes = len(Connectivity_matrix)
    No_inputs = len(inputs)
    No_obs = len(observation_points)
    Scattering_matrix_container = zero_matrix_of_size_i_j(No_nodes,1)
    Nodal_connection_container = zero_matrix_of_size_i_j(No_nodes,1)

    
    for i in range(No_nodes):
        Scattering_matrix_container[i] = get_scattering_matrix(Connectivity_matrix,i,SorP)
        Nodal_connection_container[i] = get_connections(Connectivity_matrix,No_nodes,i)
    
    t = 0
    input_vector = setup_inputs(Connectivity_matrix,No_nodes,inputs,Nodal_connection_container)
    output_vector = Setup_output_vector(Connectivity_matrix,No_nodes,inputs)
    observation_recordings = zero_matrix_of_size_i_j(time_steps,1)
    while t < time_steps:
        
        output_vector= Connect_input_phase_to_output_phase(No_nodes,input_vector,No_inputs,output_vector,Scattering_matrix_container,Nodal_connection_container)
        input_vector = reset_input_vector(input_vector)
        input_vector = Connect_output_phase_to_input_phase(No_nodes,output_vector,No_inputs,input_vector,Nodal_connection_container)
        output_vector = reset_input_vector(output_vector)
        observation_recordings[t] = evaluate_observation_points(observation_points,input_vector,No_inputs,No_obs)
        t += 1
